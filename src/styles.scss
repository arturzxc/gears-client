//MOVE THIS SCHIT TO customTheme.scss file and make this back into sass.!!!
// Angular examples use scss rather than sass (damn liars!)
// the good thing is that the sass pre-processor can compile both sass and scss!!
@use '@angular/material' as mat;

@include mat.core();

$my-palette: (
    50: #e8eaf6,
    100: #c5cae9,
    200: #9fa8da,
    300: #7986cb,
    400: #7986cb,
    500: rgb(196, 129, 87),
    600: #7986cb,
    700: #7986cb,
    800: #7986cb,
    900: #7986cb,

    A50: #e8eaf6,
    A100: #c5cae9,
    A200: #9fa8da,
    A300: #7986cb,
    A400: #7986cb,
    A500: #7986cb,
    A600: #7986cb,
    A700: #7986cb,
    A800: #7986cb,
    A900: #7986cb,

    contrast: (50: rgba(black, 0.87),
        100: rgba(black, 0.87),
        200: rgba(black, 0.87),
        300: white,
        400: white,
        500: white,
        600: rgba(black, 0.87),
        700: rgba(black, 0.87),
        800: rgba(black, 0.87),
        900: rgba(black, 0.87),
    )
);

$my-primary: mat.define-palette($my-palette, 500);
$my-accent: mat.define-palette($my-palette, A200, A100, A400);

$my-theme: mat.define-light-theme((color: (primary: $my-primary, accent: $my-accent ),
            typography: mat.define-typography-config(),
            density: 0,
        ));

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($my-theme);

// Emit styles for MatButton based on `$my-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.button-theme($my-theme);

// Include the theme mixins for other components you use here.

body {
    margin: 0;
}